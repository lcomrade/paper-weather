#!/usr/bin/python3
"""
Copyright 2021 Leonid Maslakov <teaparanoid@protonmail.com>

License: GPL-3.0-or-later

    This file is part of PaperApps.

PaperApps is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PaperApps is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with PaperApps.  If not, see <https://www.gnu.org/licenses/>.

See /usr/share/common-licenses/GPL-3, or
<https://www.gnu.org/licenses/gpl-3.0.txt> for the terms of the latest version
of the GNU General Public License.
"""

# Dependencies: python3, python3-tk, python3-requests
from tkinter import *
from tkinter.ttk import Combobox
from tkinter.ttk import Entry
from tkinter.ttk import Frame, Notebook

import configparser
import argparse
from sys import argv
from sys import exit
import os
import platform

import requests
import json
from datetime import datetime
from datetime import timedelta

# Base variables
version = "1.0"
app_name = "Paper Weather"


# UI settings
ui_x=15
ui_font="Courier 12"
ui_font_mini="Courier 12"
ui_font_bold="CourierBold 16"
ui_font_bold_mini="CourierBold 13"
pad_y=3
entry_width=12

#date_time_format="%Y-%m-%d %H:%M:%S"
#date_time_format="%H:%M:%S"
date_time_format="%d.%m %H:%M"
date_time_format_mini="%H:%M"
#date_time_format="%H:%M"

window = Tk()
#window.geometry("400x250")
window.title(app_name)




# Functions
## Launch parameter parser
def launch_flag_parser():
    parser = argparse.ArgumentParser(prog=argv[0])
    parser.add_argument ("-v", "--version", action="version", help ="output version information", version=app_name+" "+version)

    parser.add_argument("--hide-settings", action="store_const", const=True, help="hide edit (settings) button")
    parser.add_argument("--hide-refresh", action="store_const", const=True, help="hide refresh button")
    parser.add_argument("--hide-forecast", action="store_const", const=True, help="hide forecast button")
    parser.add_argument("--hide-forecast-refresh", action="store_const", const=True, help="hide forecast refresh button")
    parser.add_argument("--hide-buttons", action="store_const", const=True, help="hide all buttons")

    parser.add_argument("--settings-at-start", action="store_const", const=True, help="open settings window at start")
    parser.add_argument("--forecast-at-start", action="store_const", const=True, help="open forecast window at start")

    parser.add_argument("-u", "--update-frequency", type=int, default=450000, help="set weather info update frequency")

    parser.add_argument("-t", "--on-top", action="store_const", default=False, const=True, help="place window on top")
    parser.add_argument("-m", "--start-minimized", action="store_const", const=True, help="start main window minimized")
    return parser.parse_args()


## Exit on error
def exit_on_error(error_text, exit_code=1):
    print("ERROER:", error_text)
    print("Exit code:", exit_code)
    exit(exit_code)

## Set status in the bottom corner
def set_status(status_text="", status_fg="red"):
    if status_text !="":
        print("STATUS:", status_text)
    try:
        status_label.configure(text=status_text, fg=status_fg)
    except:
        pass

## Convert unix time to normal
def unix_time_to_normal(unix_time, unix_shift=0, strftime_format=True):
    local_unix_time = unix_time + unix_shift
    if strftime_format == True:
        return datetime.utcfromtimestamp(local_unix_time).strftime(date_time_format)
    elif strftime_format == False:
        return datetime.utcfromtimestamp(local_unix_time)

## Getting information from the API
def get_api_json_response(timestamp=0):
    if timestamp == 0:
        print("Getting weather information")
        response = requests.get("https://api.openweathermap.org/data/2.5/weather?q="+openweather_city_name+"&units="+local_units+"&lang="+api_lang+"&appid="+openweather_token)
    elif timestamp == 1:
        print("Getting weather forecast")
        response = requests.get("https://api.openweathermap.org/data/2.5/forecast?q="+openweather_city_name+"&units="+local_units+"&lang="+api_lang+"&appid="+openweather_token)
    print("API response status code:", response.status_code)

    if response.status_code == 200:
        output = json.loads(response.text)
        return output

    else:
        print("API error: response "+str(response.status_code))
        set_status("API error: response "+str(response.status_code))
        return "API_ERROR"

## Updating information labels
def update_info_labels(api_data):
    if api_data == "API_ERROR":
        return "API_ERROR"
    print("Updating whether information...")
    location_label.configure(text=str(api_data["name"])+", "+str(api_data["sys"]["country"]))
    weather_description_label.configure(text=str(api_data["weather"][0]["description"]))

    temp_label.configure(text=locale_temp_label+": "+str(api_data["main"]["temp"])+locale_main_units)
    feels_like_label.configure(text=locale_feels_like_label+": "+str(api_data["main"]["feels_like"])+locale_main_units)

    wind_speed_label.configure(text=locale_wind_speed_label+": "+str(api_data["wind"]["speed"])+locale_wind_units)
    wind_direction_label.configure(text=locale_wind_direction_label+": "+str(api_data["wind"]["deg"])+"Â°")

    clouds_all_label.configure(text=locale_clouds_all_label+": "+str(api_data["clouds"]["all"])+"%")

    try:
        rain_label.grid(row=9, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)
        rain_label.configure(text=locale_rain_label+": "+str(api_data["rain"]["1h"])+locale_millimetre_units+"/"+locale_hour_units)
    except:
        print("No rain information")
        rain_label.destroy()

    try:
            snow_label.grid(row=10, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)
            snow_label.configure(text=locale_snow_label+": "+str(api_data["snow"]["1h"])+locale_millimetre_units+"/"+locale_hour_units)
    except:
            print("No snow information")
            snow_label.destroy()

    sunrise_label.configure(text=locale_sunrise_label+": "+str(unix_time_to_normal(api_data["sys"]["sunrise"], api_data["timezone"])))
    sunset_label.configure(text=locale_sunset_label+": "+str(unix_time_to_normal(api_data["sys"]["sunset"], api_data["timezone"])))

    pressure_label.configure(text=locale_pressure_label+": "+str(api_data["main"]["pressure"])+locale_pressure_units)
    humidity_label.configure(text=locale_humidity_label+": "+str(api_data["main"]["humidity"])+"%")

## Update weather info
def update_weather(event=None, update_after=False):
    if update_info_labels(get_api_json_response()) != "API_ERROR":
        set_status(locale_last_update_status+" "+str(datetime.now().strftime(date_time_format_mini)), "green")

    if update_after == True:
        window.after(arguments.update_frequency, lambda: update_weather(update_after=True))



## Add empty label
def add_empty_label(label_row, label_column=0, label_window=window):
    empty_label = Label(label_window, text="")
    empty_label.grid(row=label_row, column=label_column)

## Save config
def save_config(event):
    try:
        config.add_section("local")
        config.add_section("openweather_api")
    except configparser.DuplicateSectionError:
        pass
    except:
        settings_status_label.configure(text="cfg error: failed create section")

    config.set("local", "lang", lang_combobox.get())
    config.set("local", "units", units_combobox.get())

    config.set("openweather_api", "api_token", api_token_entry.get())
    config.set("openweather_api", "city_name", city_name_entry.get())

    with open(config_file, "w") as config_file_open:
        config.write(config_file_open)

    print("Config file saved")
    set_status()
    print("Reading config...")
    read_config()
    print("Reading locale...")
    read_locale()
    try:
        forecast.destroy()
    except:
        pass
    update_settings_window()

    try:
        if window.state() == "normal":
            if arguments.hide_settings != True and arguments.hide_buttons != True:
                settings_button.configure(text=locale_settings_button)
            if arguments.hide_refresh != True and arguments.hide_buttons != True:
                update_info_button.configure(text=locale_update_info_button)
            if arguments.hide_forecast_refresh != True and arguments.hide_buttons != True:
                update_forecast_button.configure(text=locale_update_forecast_button)
            print("Updating whether...")
            update_weather()
    except:
        pass

    print("Updating windows state complete")

## Creat settings window
def settings_window(event=None):
    global settings
    try:
        if settings.state() == "normal":
            settings.focus_set()
            return
    except:
        pass

    settings = Tk()
    settings.resizable(0, 0)
    settings.attributes("-topmost", arguments.on_top)

    try:
        window.iconphoto(True, PhotoImage(file=icon))
    except TclError:
        print("WARNING: Failed to load icon "+"'"+icon+"'")

    #settings.geometry("450x300")
    settings.title(app_name+" - Settings")

    global local_label
    global lang_label
    global units_label
    global api_token_label
    global city_name_label

    local_label = Label(settings, text=locale_local_label, font=ui_font_bold_mini)
    local_label.grid(row=0, column=0, sticky="w")

    lang_label = Label(settings, text=locale_lang_label, font=ui_font)
    lang_label.grid(row=1, column=0, sticky="w", padx=ui_x, pady=pad_y)
    global lang_combobox
    lang_combobox = Combobox(settings, width=6)
    lang_combobox["values"] = exist_locales
    lang_combobox.current(exist_locales.index(locale_lang))
    lang_combobox.grid(row=1, column=1, sticky="w", padx=ui_x, pady=pad_y)

    units_label = Label(settings, text=locale_units_label, font=ui_font)
    units_label.grid(row=2, column=0, sticky="w", padx=ui_x, pady=pad_y)
    global units_combobox
    units_combobox = Combobox(settings, width=7)
    units_combobox["values"] = ("standard", "metric", "imperial")
    if local_units == "standard":
        units_combobox.current(0)
    elif local_units == "metric":
        units_combobox.current(1)
    elif local_units == "imperial":
        units_combobox.current(2)
    units_combobox.grid(row=2, column=1, sticky="w", padx=ui_x, pady=pad_y)


    api_label = Label(settings, text="OpenWeather API", font=ui_font_bold_mini)
    api_label.grid(row=3, column=0, sticky="w")


    api_token_label = Label(settings, text=locale_api_token_label, font=ui_font)
    api_token_label.grid(row=4, column=0, sticky="w", padx=ui_x, pady=pad_y)
    global api_token_entry
    api_token_entry = Entry(settings, width=entry_width+18)
    api_token_entry.insert(0, openweather_token)
    api_token_entry.grid(row=4, column=1, sticky="w", padx=ui_x, pady=pad_y)

    city_name_label = Label(settings, text=locale_city_name_label, font=ui_font)
    city_name_label.grid(row=5, column=0, sticky="w", padx=ui_x, pady=pad_y)
    global city_name_entry
    city_name_entry = Entry(settings, width=entry_width)
    city_name_entry.insert(0, openweather_city_name)
    city_name_entry.grid(row=5, column=1, sticky="w", padx=ui_x, pady=pad_y)


    global settings_status_label
    settings_status_label = Label(settings, text="", font=ui_font, fg="red")
    settings_status_label.grid(row=10, column=0, sticky="w", columnspan=2, padx=4, pady=pad_y)

    global save_config_button
    save_config_button = Label(settings, text=locale_save_button, font=ui_font, fg="blue", cursor="hand2")
    save_config_button.bind("<Button-1>", save_config)
    save_config_button.grid(row=11, column=0, columnspan=2, padx=4, pady=pad_y)

    settings.bind("<Control-a>", save_config)
    #settings.bind("<Control-s>", save_config)

    settings.mainloop()

## Update settings window
def update_settings_window():
    local_label.configure(text=locale_local_label)
    lang_label.configure(text=locale_lang_label)
    units_label.configure(text=locale_units_label)
    api_token_label.configure(text=locale_api_token_label)
    city_name_label.configure(text=locale_city_name_label)
    save_config_button.configure(text=locale_save_button)



## Create forecast labels
def add_forecast_labels(api_data, forecast_time, list_num=0, forecast_weekday_num=0, label_row=0, label_column=0):
    label_window = forecast_weekday_tabs[forecast_weekday_num]


    forecast_time_label = Label(label_window, text=forecast_time, font=ui_font_bold)
    forecast_time_label.grid(row=label_row, column=label_column, pady=4)

    forecast_description_label = Label(label_window, text="", font=ui_font_mini, fg="grey15")
    forecast_description_label.grid(row=label_row+1, column=label_column, pady=2)

    forecast_temp_label = Label(label_window, text=locale_temp_label, font=ui_font)
    forecast_temp_label.grid(row=label_row+2, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    forecast_feels_like_label = Label(label_window, text=locale_feels_like_label, font=ui_font)
    forecast_feels_like_label.grid(row=label_row+3, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    add_empty_label(label_row+4, label_column=label_column, label_window=label_window)


    forecast_wind_speed_label = Label(label_window, text=locale_wind_speed_label, font=ui_font)
    forecast_wind_speed_label.grid(row=label_row+5, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    forecast_wind_direction_label = Label(label_window, text=locale_wind_direction_label, font=ui_font)
    forecast_wind_direction_label.grid(row=label_row+6, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    add_empty_label(label_row+7, label_column=label_column, label_window=label_window)


    forecast_clouds_all_label = Label(label_window, text=locale_clouds_all_label, font=ui_font)
    forecast_clouds_all_label.grid(row=label_row+8, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    add_empty_label(label_row+9, label_column=label_column, label_window=label_window)


    #forecast_sunrise_label = Label(label_window, text=locale_sunrise_label, font=ui_font)
    #forecast_sunrise_label.grid(row=label_row+10, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    #forecast_sunset_label = Label(label_window, text=locale_sunset_label, font=ui_font)
    #forecast_sunset_label.grid(row=label_row+11, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    #add_empty_label(label_row+12, label_column=label_column, label_window=label_window)


    forecast_pressure_label = Label(label_window, text=locale_pressure_label, font=ui_font)
    forecast_pressure_label.grid(row=label_row+13, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    forecast_humidity_label = Label(label_window, text=locale_humidity_label, font=ui_font)
    forecast_humidity_label.grid(row=label_row+14, column=label_column, sticky="w", padx=ui_x, pady=pad_y)

    add_empty_label(label_row+15, label_column=label_column, label_window=label_window)




    forecast_description_label.configure(text=str(api_data["list"][list_num]["weather"][0]["description"]))

    forecast_temp_label.configure(text=locale_temp_label+": "+str(api_data["list"][list_num]["main"]["temp"])+locale_main_units)
    forecast_feels_like_label.configure(text=locale_feels_like_label+": "+str(api_data["list"][list_num]["main"]["feels_like"])+locale_main_units)

    forecast_wind_speed_label.configure(text=locale_wind_speed_label+": "+str(api_data["list"][list_num]["wind"]["speed"])+locale_wind_units)
    forecast_wind_direction_label.configure(text=locale_wind_direction_label+": "+str(api_data["list"][list_num]["wind"]["deg"])+"Â°")

    forecast_clouds_all_label.configure(text=locale_clouds_all_label+": "+str(api_data["list"][list_num]["clouds"]["all"])+"%")

    #forecast_sunrise_label.configure(text=locale_sunrise_label+": "+str(unix_time_to_normal(api_data["city"]["sunrise"], api_data["city"]["timezone"])))
    #forecast_sunset_label.configure(text=locale_sunset_label+": "+str(unix_time_to_normal(api_data["city"]["sunset"], api_data["city"]["timezone"])))

    forecast_pressure_label.configure(text=locale_pressure_label+": "+str(api_data["list"][list_num]["main"]["pressure"])+locale_pressure_units)
    forecast_humidity_label.configure(text=locale_humidity_label+": "+str(api_data["list"][list_num]["main"]["humidity"])+"%")

    forecast.update()
    return forecast_weekday_num


## Create forecast window
def forecast_window(event=None):
    global forecast

    try:
        if forecast.state() == "normal":
            forecast.focus_set()
            return
    except:
        pass

    forecast = Tk()
    forecast.title(app_name+" - Forecast")
    forecast.resizable(0, 0)
    forecast.attributes("-topmost", arguments.on_top)

    try:
        forecast.iconphoto(True, PhotoImage(file=icon))
    except TclError:
        print("WARNING: Failed to load icon "+"'"+icon+"'")



    global forecast_tabs
    forecast_tabs = Notebook(forecast)
    forecast_tabs.grid(row=0, column=0)

    global forecast_monday_tab
    forecast_monday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_monday_tab, text=week[0])

    global forecast_tuesday_tab
    forecast_tuesday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_tuesday_tab, text=week[1])

    global forecast_wednesday_tab
    forecast_wednesday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_wednesday_tab, text=week[2])

    global forecast_thursday_tab
    forecast_thursday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_thursday_tab, text=week[3])

    global forecast_friday_tab
    forecast_friday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_friday_tab, text=week[4])

    global forecast_saturday_tab
    forecast_saturday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_saturday_tab, text=week[5])

    global forecast_sunday_tab
    forecast_sunday_tab = Frame(forecast_tabs)
    forecast_tabs.add(forecast_sunday_tab, text=week[6])


    global forecast_weekday_tabs
    forecast_weekday_tabs = [forecast_monday_tab, forecast_tuesday_tab, forecast_wednesday_tab, forecast_thursday_tab, forecast_friday_tab, forecast_saturday_tab, forecast_sunday_tab]



    if arguments.hide_forecast_refresh != True and arguments.hide_buttons != True:
        forecast_update_button = Label(forecast, text=locale_update_info_button, font=ui_font, fg="blue", cursor="hand2")
        forecast_update_button.bind("<Button-1>", forecast_update)
        forecast_update_button.grid(row=1, column=0, padx=4, pady=pad_y)


    #forecast.bind("<Key>", lambda event: print(event.char))
    forecast.bind("<Control-Key-1>", lambda event: forecast_tabs.select(forecast_weekday_tabs[0]))
    forecast.bind("<Control-Key-2>", lambda event: forecast_tabs.select(forecast_weekday_tabs[1]))
    forecast.bind("<Control-Key-3>", lambda event: forecast_tabs.select(forecast_weekday_tabs[2]))
    forecast.bind("<Control-Key-4>", lambda event: forecast_tabs.select(forecast_weekday_tabs[3]))
    forecast.bind("<Control-Key-5>", lambda event: forecast_tabs.select(forecast_weekday_tabs[4]))
    forecast.bind("<Control-Key-6>", lambda event: forecast_tabs.select(forecast_weekday_tabs[5]))
    forecast.bind("<Control-Key-7>", lambda event: forecast_tabs.select(forecast_weekday_tabs[6]))

    forecast.bind("<Control-r>", forecast_update)
    forecast.bind("<F5>", forecast_update)

    forecast.after(50, forecast_update)
    forecast.mainloop()


def forecast_update(event=None):
    global forecast_update_run
    try:
        if forecast_update_run == True:
            print("Weather forecast update is already running")
            return
    except NameError:
        pass

    forecast_update_run = True


    api_data = get_api_json_response(1)

    forecast_weekday_num_first = unix_time_to_normal(api_data["list"][0]["dt"], unix_shift=int(api_data["city"]["timezone"]), strftime_format=False).weekday()
    weekday_num_old = -1

    for timestamp_coefficient in range(0, 40):
        forecast_time = unix_time_to_normal(api_data["list"][timestamp_coefficient]["dt"], unix_shift=int(api_data["city"]["timezone"]), strftime_format=False)
        forecast_weekday_num = forecast_time.weekday()
        forecast_time = forecast_time.strftime(date_time_format)

        if forecast_weekday_num == weekday_num_old:
            if label_column == 3:
                label_row = label_row+16
                label_column = 0
            else:
                label_column = label_column+1

        else:
            label_row = 0
            label_column = 0
            weekday_num_old = forecast_weekday_num


        add_forecast_labels(api_data, forecast_time, list_num=timestamp_coefficient, forecast_weekday_num=forecast_weekday_num, label_row=label_row, label_column=label_column)



    forecast_tabs.select(forecast_weekday_tabs[forecast_weekday_num_first])
    forecast_update_run = False






# Parse launch flags
if __name__ == "__main__":
    arguments = launch_flag_parser()

    if arguments.start_minimized == True:
        window.wm_state("iconic")




# Read config
def read_config():
    global config
    config = configparser.ConfigParser()
    global config_file
    global locale_dir
    global icon
    if platform.system() == "Linux":
        full_dir_path = os.path.expanduser("~/.config/PaperApps")
        default_config = "/usr/share/paper-weather/default.ini"
        locale_dir = "/usr/share/paper-weather/locale/"
        icon = "/usr/share/pixmaps/paper-weather.png"

    elif platform.system() == "Windows":
        full_dir_path = os.environ["APPDATA"]+"/PaperApps"
        default_config = os.environ["PROGRAMFILES"]+"/paper-weather/default.ini"
        locale_dir = os.environ["PROGRAMFILES"]+"/paper-weather/locale/"
        icon = os.environ["PROGRAMFILES"]+"/paper-weather/paper-weather.png"

    elif platform.system() == "Darwin" or platform.system() == "Java":
        exit_on_error("unsupported platform: " + platform.system())
    else:
        exit_on_error("unknown platform: " + platform.system())

    print("INFO: platform: " + platform.system())
    try:
        os.makedirs(full_dir_path)
    except FileExistsError:
        pass
    config_file = full_dir_path+"/weather.ini"


    if os.path.isfile("default.ini"):
        default_config = "default.ini"
    elif os.path.exists(default_config):
        pass
    else:
        print("WARNING: default config file not found: 'default.ini'")
        print("WARNING: default config file not found: "+"'"+default_config+"'")


    if os.path.exists("locale/"):
        locale_dir = "locale/"
    elif os.path.exists(locale_dir):
        pass
    else:
        print("WARNING: folder with localization files not found: 'locale'")
        print("WARNING: folder with localization files not found: "+"'"+locale_dir+"'")
        exit_on_error("failed to load localization files")

    if os.path.isfile("weather.ini"):
        config_file = "weather.ini"

    if os.path.isfile("paper-weather.png"):
        icon = "paper-weather.png"

    print("INFO: config: "+config_file)
    print("INFO: locale dir: "+locale_dir)
    print("INFO: icon: "+icon)


    default = configparser.ConfigParser()
    default.read(default_config, encoding="utf8")
    locale_lang_fallback = default.get("local", "lang", fallback="en_US")
    local_units_fallback = default.get("local", "units", fallback="standard")

    openweather_token_fallback = default.get("openweather_api", "api_token", fallback="")
    openweather_city_name_fallback = default.get("openweather_api", "city_name", fallback="London")


    config.read(config_file, encoding="utf8")
    global locale_lang
    locale_lang = config.get("local", "lang", fallback=locale_lang_fallback)
    global local_units
    local_units = config.get("local", "units", fallback=local_units_fallback)

    try:
        global openweather_token
        openweather_token = config.get("openweather_api", "api_token", fallback=openweather_token_fallback)
    except configparser.NoOptionError:
        set_status("OpenWeatherMap API token missing")
    global openweather_city_name
    openweather_city_name = config.get("openweather_api", "city_name", fallback=openweather_city_name_fallback)

read_config()


# Set locale
def read_locale():
    global exist_locales
    exist_locales = os.listdir(locale_dir)
    locale = configparser.ConfigParser()
    if locale_lang in exist_locales:
        locale.read(locale_dir+locale_lang, encoding="utf8")

        global api_lang
        api_lang = locale.get(locale_lang+"_main", "api_lang")


        global locale_main_units
        global locale_wind_units
        if local_units == "standard":
            locale_main_units = " "+locale.get(locale_lang+"_units", "main_units_standard")
            locale_wind_units = " "+locale.get(locale_lang+"_units", "wind_units_standard")
        elif local_units == "metric":
            locale_main_units = " "+locale.get(locale_lang+"_units", "main_units_metric")
            locale_wind_units = " "+locale.get(locale_lang+"_units", "wind_units_metric")
        elif local_units == "imperial":
            locale_main_units = " "+locale.get(locale_lang+"_units", "main_units_imperial")
            locale_wind_units = " "+locale.get(locale_lang+"_units", "wind_units_imperial")

        global locale_pressure_units
        locale_pressure_units = " "+locale.get(locale_lang+"_units", "pressure_units")

        global locale_millimetre_units
        locale_millimetre_units = " "+locale.get(locale_lang+"_units", "millimetre_units")

        global locale_hour_units
        locale_hour_units = locale.get(locale_lang+"_units", "hour_units")

        global locale_temp_label
        locale_temp_label = locale.get(locale_lang, "temp_label")
        global locale_feels_like_label
        locale_feels_like_label = locale.get(locale_lang, "feels_like_label")

        global locale_wind_speed_label
        locale_wind_speed_label = locale.get(locale_lang, "wind_speed_label")
        global locale_wind_direction_label
        locale_wind_direction_label = locale.get(locale_lang, "wind_direction_label")

        global locale_clouds_all_label
        locale_clouds_all_label = locale.get(locale_lang, "clouds_all_label")

        global locale_rain_label
        locale_rain_label = locale.get(locale_lang, "rain_label")

        global locale_snow_label
        locale_snow_label = locale.get(locale_lang, "snow_label")

        global locale_sunrise_label
        locale_sunrise_label = locale.get(locale_lang, "sunrise_label")

        global locale_sunset_label
        locale_sunset_label = locale.get(locale_lang, "sunset_label")

        global locale_pressure_label
        locale_pressure_label = locale.get(locale_lang, "pressure_label")
        global locale_humidity_label
        locale_humidity_label = locale.get(locale_lang, "humidity_label")

        global locale_settings_button
        locale_settings_button = locale.get(locale_lang, "settings_button")
        global locale_update_info_button
        locale_update_info_button = locale.get(locale_lang, "update_info_button")
        global locale_update_forecast_button
        locale_update_forecast_button = locale.get(locale_lang, "update_forecast_button")


        global locale_local_label
        locale_local_label = locale.get(locale_lang+"_settings", "local_label")
        global locale_lang_label
        locale_lang_label = locale.get(locale_lang+"_settings", "lang_label")
        global locale_units_label
        locale_units_label = locale.get(locale_lang+"_settings", "units_label")

        global locale_api_token_label
        locale_api_token_label = locale.get(locale_lang+"_settings", "api_token_label")
        global locale_city_name_label
        locale_city_name_label = locale.get(locale_lang+"_settings", "city_name_label")

        global locale_save_button
        locale_save_button = locale.get(locale_lang+"_settings", "save_button")


        global locale_last_update_status
        locale_last_update_status = locale.get(locale_lang+"_statuses", "last_update_status")


        global week
        week = []
        week.append(locale.get(locale_lang+"_week", "monday"))
        week.append(locale.get(locale_lang+"_week", "tuesday"))
        week.append(locale.get(locale_lang+"_week", "wednesday"))
        week.append(locale.get(locale_lang+"_week", "thursday"))
        week.append(locale.get(locale_lang+"_week", "friday"))
        week.append(locale.get(locale_lang+"_week", "saturday"))
        week.append(locale.get(locale_lang+"_week", "sunday"))

    else:
        exit_on_error("unknown locale: "+locale_lang)
read_locale()




# Set labels
window.resizable(0, 0)
window.attributes("-topmost", arguments.on_top)
try:
    window.iconphoto(True, PhotoImage(file=icon))
except TclError:
    print("WARNING: Failed to load icon "+"'"+icon+"'")

location_label = Label(window, text=openweather_city_name, font=ui_font_bold)
location_label.grid(row=0, column=0, columnspan=3, pady=4)

weather_description_label = Label(window, text="", font=ui_font_mini, fg="grey15")
weather_description_label.grid(row=1, column=0, columnspan=3, pady=2)

temp_label = Label(window, text=locale_temp_label, font=ui_font)
temp_label.grid(row=2, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

feels_like_label = Label(window, text=locale_feels_like_label, font=ui_font)
feels_like_label.grid(row=3, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

add_empty_label(4)


wind_speed_label = Label(window, text=locale_wind_speed_label, font=ui_font)
wind_speed_label.grid(row=5, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

wind_direction_label = Label(window, text=locale_wind_direction_label, font=ui_font)
wind_direction_label.grid(row=6, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

add_empty_label(7)


clouds_all_label = Label(window, text=locale_clouds_all_label, font=ui_font)
clouds_all_label.grid(row=8, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

rain_label = Label(window, text=locale_rain_label, font=ui_font)
#rain_label.grid(row=9, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

snow_label = Label(window, text=locale_snow_label, font=ui_font)
#snow_label.grid(row=10, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

add_empty_label(11)


sunrise_label = Label(window, text=locale_sunset_label, font=ui_font)
sunrise_label.grid(row=12, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

sunset_label = Label(window, text=locale_sunset_label, font=ui_font)
sunset_label.grid(row=13, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

add_empty_label(14)


pressure_label = Label(window, text=locale_pressure_label, font=ui_font)
pressure_label.grid(row=15, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)

humidity_label = Label(window, text=locale_humidity_label, font=ui_font)
humidity_label.grid(row=16, column=0, sticky="w", columnspan=3, padx=ui_x, pady=pad_y)


if arguments.hide_settings != True and arguments.hide_buttons != True:
    settings_button = Label(window, text=locale_settings_button, font=ui_font, fg="black", cursor="hand2")
    settings_button.bind("<Button-1>", settings_window)
    settings_button.grid(row=18, column=2, padx=4, pady=pad_y)

if arguments.hide_refresh != True and arguments.hide_buttons != True:
    update_info_button = Label(window, text=locale_update_info_button, font=ui_font, fg="blue", cursor="hand2")
    update_info_button.bind("<Button-1>", update_weather)
    update_info_button.grid(row=18, column=0, padx=4, pady=pad_y)

if arguments.hide_forecast != True and arguments.hide_buttons != True:
    update_forecast_button = Label(window, text=locale_update_forecast_button, font=ui_font, fg="blue", cursor="hand2")
    update_forecast_button.bind("<Button-1>", forecast_window)
    update_forecast_button.grid(row=18, column=1, padx=4, pady=pad_y)


status_label = Label(window, text="", font=ui_font, fg="red")
status_label.grid(row=17, column=0, sticky="w", columnspan=3, padx=6, pady=pad_y)



window.bind("<Control-r>", update_weather)
window.bind("<F5>", update_weather)

window.bind("<Control-e>", settings_window)

window.bind("<Control-f>", forecast_window)




if __name__ == "__main__":
    if arguments.settings_at_start == True:
        window.after(10, settings_window)

    if arguments.forecast_at_start == True:
        window.after(10, forecast_window)


    #window.after(50, update_weather)
    window.after(50, lambda: update_weather(update_after=True))
    window.mainloop()
